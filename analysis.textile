---
layout: default
title: Analysis API
---

GeoIQ provides a full suite of spatial and statistical analysis tools to process data. Analysis operations are performed as asynchronous jobs, so when a request is made for analysis the return will point to the placeholder for where there resulting dataset will be stored. Your applications should use the REST API to check overlay state for when it's done.

*Endpoint:* /analysis.:format

*Description:* GeoCommons is making a variety of analysis modules available including aggregation.  Through the analysis API you can run operations on a dataset to create a new resulting dataset.

*HTTP Methods Available:* POST

*URL Summary:*

|_. Task |_. URL |_. Formats |_. HTTP METHOD |
|Analyze|http://geocommons.com/analysis.:format|json|POST|

h2. Buffer

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=buffer|
|ds1|ID of dataset to compute buffer for|ds1=160474|
|distance|Numeric value of distance to buffer|distance=25|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|unit|Distance units. Any of (km,miles,m,ft,degrees)|unit=km|

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Create a dataset of areas within 25 miles of an electric vehicle charging station ("160474":http://geocommons.com/overlays/160474):_
<pre>curl -i -X POST -u "username:password" -d "distance=25" -d "units=miles" -d "ds1=160474" -d "calculation=buffer" http://geocommons.com/analysis.json</pre>

h2. Intersection

Determine all the locations where one data set overlaps another data set on the map.

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=intersect|
|ds1|First datasets to intersect with|ds1=160475|
|ds2|Second datasets to intersect with|ds2=160379|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|merge|how to merge attributes: combine, prefer_1 or prefer_2; defaults to prefer_1|merge=prefer_1|

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Create a dataset of areas within 25 miles of an electric vehicle charging station ("160475":http://geocommons.com/overlays/160475) AND 50 miles of a theme park ("160379":http://geocommons.com/overlays/160379):_
<pre>curl -i -X POST -u "username:password" -d "ds1=160475" -d "ds2=160379" -d "calculation=intersect" http://geocommons.com/analysis.json</pre>

h2. Spatial Aggregation

You can aggregate an existing dataset to a set of boundaries to create a new dataset. This will create a new dataset that will be returned as an object in the response body.

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=aggregation|
|ds1|ID of the dataset to aggregate|ds1=160474|
|ds2|ID of the boundary dataset|ds2=160361|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|aggregates|array of aggregate columns to add to the result|aggregates[][name]=population&aggregates[][calc]=sum|
|keep&#95;empty|carry over polygons that do not intersect with the dataset being aggregated (default: false)|keep&#95;empty=0|

A _count of <dataset>_ column is automatically added that has the number of features that were within that boundary.

*Curl Example*

_Create a map of electric vehicle charging stations ("160474":http://geocommons.com/overlays/160474) by state ("160361":http://geocommons.com/overlays/160361), with number public stations as a new attribute:_

<pre>curl -i -X POST -u "username:password" -d "calculation=aggregation" -d "ds1=160474" -d "ds2=160361" -d "aggregates[][name]=public" -d "aggregates[][calc]=sum" -d "keep_empty=1" http://geocommons.com/analysis.json</pre>

h2. Cross Dataset Correlation 

You can cross correlate two datasets to a boundary dataset to create a new dataset. 

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=correlation|
|ds1|ID of dependent dataset to correlate|ds1=160474|
|atr&#95;1|Attribute name in dependent dataset|atr&#95;1=public|
|ds2|ID of independent dataset to correlate to|ds2=160476|
|atr&#95;2|Attribute name in dependent dataset|atr&#95;2=PERCENT|
|ds3|Boundary dataset to aggregate to|ds3=160361|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation_1|aggregate calculation for dependent dataset: one of "sum", "average", "max", or "min"; defaults to count|sum|
|calculation_2|aggregate calculation for independent dataset: one of "sum", "average", "max", or "min"; defaults to count|sum|

*Curl Example*

_Determine how number of electric vehicle charging stations ("160474":http://geocommons.com/overlays/160474) is correlated with cloud-free days ("160476":http://geocommons.com/overlays/160476), aggregating by state ("160361":http://geocommons.com/overlays/160361):_
<pre>curl -u username:password -X POST -d "calculation=correlation" -d "ds1=160474" -d "atr_1=public" -d "calculation_1=sum" -d "ds2=160476" -d "atr_2=PERCENT" -d "calculation_2=average" -d "ds3=160361" http://geocommons.com/analysis.json
</pre>

h2. Sum

You can create a new dataset with two attributes added. 

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=sum|
|ds1|ID of dataset|ds1=160502|
|atr&#95;1|First attribute to add|atr&#95;1=Under5|
|atr&#95;2|Second attribute to add|atr&#95;2=Y5to13|

*Optional Parameters:*

_none_

*Curl Example*

_Get a dataset with number of people in each state who are under 13 by adding two age groups in ("160502":http://geocommons.com/overlays/160502):_
<pre>curl -u username:password -X POST -d "calculation=sum" -d "ds1=160502" -d "atr_1=Under5" -d "atr_2=Y5to13"  http://geocommons.com/analysis.json
</pre>


h2. Difference

You can create a new dataset with the difference between two attributes. 

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=difference|
|ds1|ID of dataset|ds1=160506|
|atr&#95;1|Attribute to subtract from|atr&#95;1=Total|
|atr&#95;2|Attribute to subtract|atr&#95;2=sum of Under5 and Y5to13|

*Optional Parameters:*

_none_

*Curl Example*

_Get a dataset with number of people in each state who are 13 or older by subtracting the number under 13 from the total population in ("160506":http://geocommons.com/overlays/160506):_
<pre>curl -u "username:password" -X POST -d "calculation=difference" -d "ds1=160506" -d "atr_1=Total" -d "atr_2=sum of Under5 and Y5to13"   http://geocommons.com/analysis.json
</pre>

h2. Group By

Combine features of a dataset based on a common value. Each resulting feature will have the geometry of one of the items in the group.

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=group&#95;by|
|ds1|ID of dataset|ds1=160474|
|atr&#95;1|Attribute to group on|atr&#95;1=state|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|aggregates|list of aggregate calculations|aggregates[][name]=public&aggregates[][calc]=sum|

_none_

A _count of <dataset>_ column is automatically added that has the number of features that were in the group.

*Curl Example*

_Create a map of electric vehicle charging stations ("160474":http://geocommons.com/overlays/160474) by state using the state column to group on, with number public stations as a new attribute:_
<pre>curl -u "username:password" -X POST -d "calculation=group_by" -d "ds1=160474" -d "atr_1=state" -d "aggregates[][name]=public" -d "aggregates[][calc]=sum" http://geocommons.com/analysis.json
</pre>

h2. Simplify

Simplify a dataset to make the features less complex

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=simplify|
|ds1|ID of dataset to compute buffer for|ds1=160474|
|tolerance|Numeric value of distance to simplify to|tolerance=25|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|unit|Tolerance units. Any of (km,miles,m,ft,degrees); defaults to km|units=km|
|method|method to use: Either "douglas peucker" or "preserve topology"; defaults to "douglas peucker"|method=preserve topology|

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Simplify a dataset of US states ("160361":http://geocommons.com/overlays/160361) to reduce its size:_
<pre>curl -i -X POST -u "username:password" -d "tolerance=20" -d "unit=miles" -d "ds1=160361" -d "method=preserve topology" -d "calculation=simplify" http://geocommons.com/analysis.json</pre>

h2. Expression

Use your own equation to calculate a result for the attributes in a dataset

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=expression|
|ds1|ID of dataset|ds1=160502|
|expression|Expression to compute|expression=$[Total]-$[Under5]-$[Y5to13]|

*Optional Parameters:*

_none_

*Curl Example*

"$[Total]-($[Under5]+$[Y5to13])"

_Get a dataset with number of people in each state who are 13 or older by subtracting the number under 5 and 5-13 from the total population in ("160502":http://geocommons.com/overlays/160502):_
<pre>curl &#45;u "username:password" &#45;X POST &#45;d "calculation=expression" &#45;d "ds1=160502" &#45;d "expression=$[Total]&#45;$[Under5]-$[Y5to13]"  http://geocommons.com/analysis.json
</pre>

h2. Clip

Clip an input dataset based on a clipping dataset

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=clip|
|ds1|ID of the dataset to clip|ds1=160474|
|ds2|ID of the clipping dataset|ds2=160379|

*Optional Parameters:*

_none_

*Curl Example*

_Create a dataset of only those electric vehicle charging stations ("160474":http://geocommons.com/overlays/160474) that are within 50 miles of a theme park ("160379":http://geocommons.com/overlays/160379):_

<pre>curl -i -X POST -u "username:password" -d "calculation=clip" -d "ds1=160474" -d "ds2=160379" http://geocommons.com/analysis.json</pre>

h2. Dissolve

Merge polygons together that have a common attribute

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=dissolve|
|ds1|ID of the dataset to aggregate|ds1=160474|
|atr&#95;1|Attribute to dissolve on|atr&#95;1=Subregion|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|aggregates|array of aggregate columns to add to the result|aggregates[][name]=population&aggregates[][calc]=sum|

A _count of <dataset>_ column is automatically added that has the number of features that were within each boundary.

*Curl Example*

_Create a dataset of US regions by dissolving on the Subregion attribute of states dataset ("160361":http://geocommons.com/overlays/160361):_

<pre>curl -i -X POST -u "username:password" -d "calculation=dissolve" -d "ds2=160361" -d "atr_1=SubRegion" http://geocommons.com/analysis.json</pre>

h2. Donut Buffer

Create a ring buffer around your points or lines.

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=donut&#95;buffer|
|ds1|ID of dataset to compute buffer for|ds1=160474|
|distance|Radius of outer ring of buffer|distance=25|
| min&#95;distance | Distance to inner ring of buffer|min&#95;distance=5| 

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|unit|Distance units. Any of (km,miles,m,ft,degrees)|unit=km|

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Create a dataset of areas within 25 miles but at least 5 miles of an electric vehicle charging station ("160474":http://geocommons.com/overlays/160474):_
<pre>curl -i -X POST -u "username:password" -d "distance=25" -d "min_distance=5" -d "unit=miles" -d "ds1=160474" -d "calculation=donut_buffer" http://geocommons.com/analysis.json</pre>

h2. Buffer Intersection

Find all of the features in one dataset that are within a perimeter from another dataset's features (Buffer + Intersection)

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=buffer&#95;intersect|
|ds1|ID of dataset to filter|ds1=160474|
|ds2|ID of dataset to filter by|ds2=160375|
|distance|Radius of buffer|distance=25|

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|unit|Distance units. Any of (km,miles,m,ft,degrees)|unit=km|
| min&#95;distance | Distance to inner ring of buffer| min&#95;distance=5 |
| include&#95;distance | Include distance to second dataset as attribute; 0=false, 1=true; defaults to 1 | include&#95;distance=1 |

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Create a dataset of only those electric vehicle charging stations ("160474":http://geocommons.com/overlays/160474) that are within 50 miles of a theme park ("160375":http://geocommons.com/overlays/160375):_
<pre>curl -i -X POST -u "username:password" -d "distance=50" -d "unit=miles" -d "ds1=160474" -d "ds2=160375" -d "include_distance=1" -d "calculation=buffer_intersect" http://geocommons.com/analysis.json</pre>

h2. Union

Join the data and geometries from two datasets into one. THe resulting dataset will have one of and unique geometries from either dataset. Attributes from two features with identical geometries are combined.

Note: since the matching of geometries is exact, if you are using union to merge attributes, ensure that the geometries are identical. This is typically done by using datasets that were geojoined or aggregated to the some boundary geometries.

*Required Parameters:*

|_. Parameter |_. Description |_. Example |
|calculation|the algorithm for the analysis|calculation=union|
|ds1|ID of dataset to merge|ds1=160474|
|ds2|ID of second dataset to merge|ds2=160375|
|distance|Radius of buffer|distance=25|

*Optional Parameters:*

*Optional Parameters:*

|_. Parameter |_. Description |_. Example |
|merge|how to merge attributes: combine, prefer&#95;1 or prefer&#95;2; defaults to prefer&#95;1|merge=combine|

*Returns*

|_. Type |_. Description |_. Example |
|Dataset|returns the full resulting dataset|https://gist.github.com/860926|

*Curl Examples:*

_Merge North Carolina ("160818":http://geocommons.com/overlays/160818) and Virginia ("160819":http://geocommons.com/overlays/160819) neighborhood boundaries into a single dataset. Since there are no boundaries in common, there should be no need to merge attributes:_

<pre>curl -i -X POST -u "username:password" -d "ds1=160818" -d "ds2=160819" -d "calculation=union" http://geocommons.com/analysis.json</pre>
 
_Combine attributes from Electric vehicle charching stations by state ("160822":http://geocommons.com/overlays/160822) and Photovoltaic instalations by state ("160824":http://geocommons.com/overlays/160824). Because these datasets both have the same geometry (US states), the attributes will be merged, so we specify a merge option of prefer&#95;1 - we don't really need two "State Code" attributes in our result dataset:_

<pre>curl -i -X POST -u "username:password" -d "ds1=160822" -d "ds2=160824" -d "merge=prefer_1" -d "calculation=union" http://geocommons.com/analysis.json</pre>
